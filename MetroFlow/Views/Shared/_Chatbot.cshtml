@* Views/Shared/Chatbot.cshtml *@

<!-- Chatbot Container -->
<div class="chatbot-container">
    <div class="chatbot-window">
        <div class="chatbot-header">
            <div class="chatbot-title">
                <i class="fas fa-robot"></i>
                <span>MetroFlow AI Assistant</span>
            </div>
            <div class="chatbot-controls">
                <button class="chatbot-clear" title="Clear conversation">
                    <i class="fas fa-broom"></i>
                </button>
                <button class="chatbot-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="chatbot-messages">
            <div class="message bot-message">
                <div class="message-header">
                    <i class="fas fa-robot"></i>
                    <span>MetroFlow AI Assistant</span>
                </div>
                <div class="message-content">
                    Hello! I'm your MetroFlow AI Assistant. I can help you with tickets, schedules, route planning, issue resolution, and more. How can I assist you today?
                </div>
                <div class="message-timestamp">Just now</div>
            </div>
            <div class="suggested-questions">
                <button class="suggested-question" data-question="Plan my route from Uttara to Motijheel">
                    <i class="fas fa-route"></i> Route Planning
                </button>
                <button class="suggested-question" data-question="I lost my item on the metro">
                    <i class="fas fa-search"></i> Lost Item Help
                </button>
                <button class="suggested-question" data-question="What are the ticket options?">
                    <i class="fas fa-ticket-alt"></i> Ticket Options
                </button>
                <button class="suggested-question" data-question="Show current service status">
                    <i class="fas fa-info-circle"></i> Service Status
                </button>
            </div>
        </div>
        <div class="chatbot-input">
            <div class="input-options">
                <button class="input-option" title="Attach file">
                    <i class="fas fa-paperclip"></i>
                </button>
                <button class="input-option" title="Send location">
                    <i class="fas fa-map-marker-alt"></i>
                </button>
            </div>
            <input type="text" placeholder="Ask about routes, tickets, schedules, or report an issue...">
            <button class="send-button">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
    <div class="chatbot-icon">
        <i class="fas fa-comments"></i>
        <span class="notification-badge"></span>
    </div>
</div>

<style>
    /* Chatbot Styles */
    .chatbot-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    .chatbot-icon {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #16a34a, #15803d);
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-size: 24px;
        cursor: pointer;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
        position: relative;
    }

    .notification-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        width: 20px;
        height: 20px;
        background: #dc2626;
        color: white;
        border-radius: 50%;
        font-size: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        display: none;
    }

    .chatbot-icon:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2);
    }

    .chatbot-window {
        width: 380px;
        height: 500px;
        background: white;
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        display: flex;
        flex-direction: column;
        overflow: hidden;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.3s ease;
        position: absolute;
        bottom: 70px;
        right: 0;
        pointer-events: none;
    }

        .chatbot-window.active {
            opacity: 1;
            transform: translateY(0);
            pointer-events: all;
        }

    .chatbot-header {
        background: linear-gradient(135deg, #16a34a, #15803d);
        color: white;
        padding: 16px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .chatbot-title {
        display: flex;
        align-items: center;
        gap: 10px;
        font-weight: 600;
    }

    .chatbot-controls {
        display: flex;
        gap: 8px;
    }

    .chatbot-close, .chatbot-clear {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        cursor: pointer;
        font-size: 14px;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: background 0.2s;
    }

        .chatbot-close:hover, .chatbot-clear:hover {
            background: rgba(255, 255, 255, 0.3);
        }

    .chatbot-messages {
        flex: 1;
        padding: 16px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 16px;
        background: #f8fafc;
    }

    .message {
        max-width: 85%;
        padding: 12px;
        border-radius: 12px;
        line-height: 1.4;
        animation: fadeIn 0.3s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    }

    .message-header {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 12px;
        font-weight: 600;
        margin-bottom: 6px;
        color: #64748b;
    }

    .message-content {
        margin-bottom: 6px;
    }

    .message-timestamp {
        font-size: 10px;
        text-align: right;
        color: #94a3b8;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .bot-message {
        background: white;
        align-self: flex-start;
        border-bottom-left-radius: 4px;
    }

    .user-message {
        background: linear-gradient(135deg, #16a34a, #15803d);
        color: white;
        align-self: flex-end;
        border-bottom-right-radius: 4px;
    }

        .user-message .message-header {
            color: rgba(255, 255, 255, 0.8);
        }

        .user-message .message-timestamp {
            color: rgba(255, 255, 255, 0.7);
        }

    .chatbot-input {
        display: flex;
        padding: 12px;
        border-top: 1px solid #e5e7eb;
        background: #f9fafb;
        align-items: center;
    }

    .input-options {
        display: flex;
        gap: 4px;
        margin-right: 8px;
    }

    .input-option {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border: none;
        background: transparent;
        color: #64748b;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .input-option:hover {
            background: #e5e7eb;
        }

    .chatbot-input input {
        flex: 1;
        padding: 12px 16px;
        border: 1px solid #e5e7eb;
        border-radius: 24px;
        outline: none;
        font-size: 14px;
    }

        .chatbot-input input:focus {
            border-color: #16a34a;
        }

    .send-button {
        margin-left: 8px;
        width: 44px;
        height: 44px;
        border-radius: 50%;
        background: linear-gradient(135deg, #16a34a, #15803d);
        color: white;
        border: none;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .suggested-questions {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 8px;
        margin-top: 12px;
    }

    .suggested-question {
        background: #e5e7eb;
        border: none;
        border-radius: 12px;
        padding: 10px;
        font-size: 12px;
        cursor: pointer;
        text-align: center;
        transition: all 0.2s;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
    }

        .suggested-question:hover {
            background: #d1d5db;
            transform: translateY(-2px);
        }

    /* Typing indicator */
    .typing-indicator {
        display: flex;
        align-items: center;
        background: #f1f5f9;
        padding: 12px 16px;
        border-radius: 18px;
        align-self: flex-start;
        border-bottom-left-radius: 4px;
    }

    .typing-dot {
        width: 8px;
        height: 8px;
        background: #64748b;
        border-radius: 50%;
        margin: 0 2px;
        animation: typingAnimation 1.4s infinite ease-in-out;
    }

        .typing-dot:nth-child(1) {
            animation-delay: 0s;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

    @@keyframes typingAnimation {
        0%, 60%, 100% {
            transform: translateY(0);
        }

        30% {
            transform: translateY(-5px);
        }
    }

    .info-item {
        margin: 8px 0;
        padding-left: 8px;
        border-left: 3px solid #16a34a;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
        margin-top: 12px;
        flex-wrap: wrap;
    }

    .action-button {
        background: #16a34a;
        color: white;
        border: none;
        border-radius: 16px;
        padding: 6px 12px;
        font-size: 12px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 4px;
    }

        .action-button.secondary {
            background: #e5e7eb;
            color: #374151;
        }

    .route-map {
        margin-top: 12px;
        border-radius: 8px;
        overflow: hidden;
        height: 150px;
        background: #e5e7eb;
        display: flex;
        justify-content: center;
        align-items: center;
        color: #64748b;
        font-style: italic;
    }

    .interactive-element {
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 12px;
        margin-top: 12px;
    }

    .form-group {
        margin-bottom: 12px;
    }

        .form-group label {
            display: block;
            margin-bottom: 4px;
            font-size: 12px;
            font-weight: 600;
            color: #374151;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
        }

    .form-submit {
        background: #16a34a;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 8px 16px;
        font-size: 14px;
        cursor: pointer;
        width: 100%;
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 8px;
    }

    .status-dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
    }

        .status-dot.green {
            background: #16a34a;
        }

        .status-dot.yellow {
            background: #eab308;
        }

        .status-dot.red {
            background: #dc2626;
        }

    .feedback-rating {
        display: flex;
        gap: 4px;
        margin-top: 12px;
    }

    .feedback-star {
        color: #d1d5db;
        cursor: pointer;
        transition: color 0.2s;
    }

        .feedback-star:hover, .feedback-star.active {
            color: #eab308;
        }
</style>

<script>
    // Enhanced MetroFlow database
    const metroFlowDB = {
        tickets: {
            single: {
                price: "From $1.50 to $3.00 based on distance",
                purchase: ["Station counters", "Ticket vending machines", "Mobile app"],
                validity: "Single journey between two stations"
            },
            dayPass: {
                price: "$8.00",
                validity: "24 hours from first use",
                purchase: ["Station counters", "Mobile app"],
                benefits: "Unlimited travel for 24 hours"
            },
            mrtPass: {
                price: "$500 ($200 refundable deposit + $300 usable balance)",
                discount: "10% discount on all fares",
                validity: "10 years",
                purchase: ["Station counters", "Online portal"],
                recharge: ["Station counters", "Vending machines", "Mobile app"]
            }
        },
        schedule: {
            weekdays: {
                operation: "Saturday to Thursday",
                firstTrain: "5:30 AM",
                lastTrain: "11:00 PM",
                frequency: "Every 8-10 minutes (peak), 10-12 minutes (off-peak)"
            },
            friday: {
                operation: "Friday service",
                firstTrain: "3:00 PM",
                lastTrain: "10:20 PM",
                frequency: "Every 12 minutes"
            },
            routes: {
                uttaraToMotijheel: {
                    stations: ["Uttara North", "Uttara Center", "Uttara South", "Pallabi", "Mirpur 11", "Mirpur 10", "Kazipara", "Shewrapara", "Agargaon", "Bijoy Sarani", "Farmgate", "Karwan Bazar", "Shahbagh", "Dhaka University", "Bangladesh Secretariat", "Motijheel"],
                    firstTrain: "7:10 AM",
                    lastTrain: "9:00 PM",
                    duration: "40 minutes"
                },
                motijheelToUttara: {
                    stations: ["Motijheel", "Bangladesh Secretariat", "Dhaka University", "Shahbagh", "Karwan Bazar", "Farmgate", "Bijoy Sarani", "Agargaon", "Shewrapara", "Kazipara", "Mirpur 10", "Mirpur 11", "Pallabi", "Uttara South", "Uttara Center", "Uttara North"],
                    firstTrain: "7:30 AM",
                    lastTrain: "9:40 PM",
                    duration: "40 minutes"
                }
            }
        },
        fares: {
            single: {
                range: "$1.50 - $3.00",
                calculation: "Based on distance traveled",
                zones: [
                    { stations: 1, price: "$1.50" },
                    { stations: 2, price: "$1.75" },
                    { stations: 3, price: "$2.00" },
                    { stations: 4, price: "$2.25" },
                    { stations: 5, price: "$2.50" },
                    { stations: "6+", price: "$3.00" }
                ]
            },
            discounts: {
                students: "50% with valid ID",
                seniors: "50% for ages 65+",
                children: "Free under 5 years",
                group: "15% discount for groups of 10+"
            }
        },
        stations: {
            count: "20 stations",
            main: ["Uttara North", "Uttara Center", "Uttara South", "Pallabi", "Mirpur 11", "Mirpur 10", "Kazipara", "Shewrapara", "Agargaon", "Bijoy Sarani", "Farmgate", "Karwan Bazar", "Shahbagh", "Dhaka University", "Bangladesh Secretariat", "Motijheel"],
            facilities: ["Ticket counters", "Vending machines", "Restrooms", "Information desks", "Accessibility services"]
        },
        contact: {
            phone: "+880-XXXX-XXXXXX",
            email: "info@metroflow.com",
            hours: "8:00 AM - 10:00 PM daily",
            emergency: "+880-XXXX-EMERGENCY"
        },
        serviceStatus: {
            lines: {
                northSouth: {
                    status: "normal",
                    message: "All trains running on schedule"
                },
                eastWest: {
                    status: "delay",
                    message: "Minor delays due to maintenance work"
                }
            },
            lastUpdated: "2023-11-15 10:30 AM"
        },
        lostAndFound: {
            locations: ["Uttara North Station", "Motijheel Station"],
            contact: "+880-XXXX-LOST",
            hours: "9:00 AM - 5:00 PM daily",
            process: "Visit any station lost and found office with identification"
        }
    };

    // User session data
    let userSession = {
        conversationHistory: [],
        currentContext: null,
        userLocation: null,
        userName: null
    };

    document.addEventListener('DOMContentLoaded', function() {
        const chatbotIcon = document.querySelector('.chatbot-icon');
        const chatbotWindow = document.querySelector('.chatbot-window');
        const closeButton = document.querySelector('.chatbot-close');
        const clearButton = document.querySelector('.chatbot-clear');
        const sendButton = document.querySelector('.send-button');
        const inputField = document.querySelector('.chatbot-input input');
        const messagesContainer = document.querySelector('.chatbot-messages');
        const suggestedQuestions = document.querySelectorAll('.suggested-question');
        const attachButton = document.querySelector('.input-option:nth-child(1)');
        const locationButton = document.querySelector('.input-option:nth-child(2)');

        // Toggle chatbot window
        chatbotIcon.addEventListener('click', function() {
            chatbotWindow.classList.toggle('active');
            if (chatbotWindow.classList.contains('active')) {
                inputField.focus();
                document.querySelector('.notification-badge').style.display = 'none';
            }
        });

        // Close chatbot window
        closeButton.addEventListener('click', function() {
            chatbotWindow.classList.remove('active');
        });

        // Clear conversation
        clearButton.addEventListener('click', function() {
            // Keep only the first bot message
            const messages = messagesContainer.querySelectorAll('.message, .suggested-questions');
            for (let i = 1; i < messages.length; i++) {
                messages[i].remove();
            }

            // Reset session
            userSession.conversationHistory = [];
            userSession.currentContext = null;

            // Add new suggested questions
            addSuggestedQuestions([
                "Plan my route from Uttara to Motijheel",
                "I lost my item on the metro",
                "What are the ticket options?",
                "Show current service status"
            ]);
        });

        // Send message function
        function sendMessage() {
            const message = inputField.value.trim();
            if (message) {
                // Add user message
                addMessage(message, 'user');
                inputField.value = '';

                // Add to conversation history
                userSession.conversationHistory.push({
                    type: 'user',
                    content: message,
                    timestamp: new Date()
                });

                // Simulate bot response after a short delay
                setTimeout(() => {
                    simulateTyping();
                    setTimeout(() => {
                        respondToMessage(message);
                    }, 1500);
                }, 500);
            }
        }

        // Send message on button click
        sendButton.addEventListener('click', sendMessage);

        // Send message on Enter key
        inputField.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Suggested questions
        suggestedQuestions.forEach(button => {
            button.addEventListener('click', function() {
                inputField.value = this.getAttribute('data-question');
                sendMessage();
            });
        });

        // Location button
        locationButton.addEventListener('click', function() {
            if (navigator.geolocation) {
                simulateTyping();
                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        userSession.userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        const typingElement = document.querySelector('.typing-indicator');
                        if (typingElement) typingElement.remove();

                        addMessage("I've received your location. How can I help you with location-based services?", 'bot');
                        addSuggestedQuestions([
                            "Find nearest station",
                            "Plan route from my location",
                            "Station facilities near me"
                        ]);
                    },
                    function(error) {
                        const typingElement = document.querySelector('.typing-indicator');
                        if (typingElement) typingElement.remove();

                        addMessage("I couldn't access your location. Please make sure location services are enabled, or you can tell me your location manually.", 'bot');
                    }
                );
            } else {
                addMessage("Your browser doesn't support geolocation. Please tell me your location manually.", 'bot');
            }
        });

        // Add message to chat
        function addMessage(text, sender) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.classList.add(sender + '-message');

            const now = new Date();
            const timestamp = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            messageElement.innerHTML = `
                <div class="message-header">
                    <i class="fas fa-${sender === 'user' ? 'user' : 'robot'}"></i>
                    <span>${sender === 'user' ? 'You' : 'MetroFlow AI Assistant'}</span>
                </div>
                <div class="message-content">${text}</div>
                <div class="message-timestamp">${timestamp}</div>
            `;

            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Add formatted message to chat
        function addFormattedMessage(content, sender) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.classList.add(sender + '-message');

            const now = new Date();
            const timestamp = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            messageElement.innerHTML = `
                <div class="message-header">
                    <i class="fas fa-${sender === 'user' ? 'user' : 'robot'}"></i>
                    <span>${sender === 'user' ? 'You' : 'MetroFlow AI Assistant'}</span>
                </div>
                <div class="message-content">${content}</div>
                <div class="message-timestamp">${timestamp}</div>
            `;

            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Simulate typing indicator
        function simulateTyping() {
            const typingElement = document.createElement('div');
            typingElement.classList.add('typing-indicator');
            typingElement.innerHTML = `
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            `;
            messagesContainer.appendChild(typingElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;

            return typingElement;
        }

        // Remove typing indicator
        function removeTypingIndicator() {
            const typingElement = document.querySelector('.typing-indicator');
            if (typingElement && typingElement.parentNode) {
                typingElement.parentNode.removeChild(typingElement);
            }
        }

        // Bot response logic
        function respondToMessage(message) {
            removeTypingIndicator();

            let response = "";
            message = message.toLowerCase();

            // Check if we're in a specific context first
            if (userSession.currentContext) {
                handleContextualResponse(message);
                return;
            }

            // Route planning
            if (message.includes('route') || message.includes('how to go') || message.includes('from') && message.includes('to')) {
                handleRoutePlanning(message);
            }
            // Ticket purchase options
            else if (message.includes('ticket') || message.includes('purchase') || message.includes('buy')) {
                response = `
                    <strong>Ticket Purchase Options:</strong><br>
                    <div class="info-item"><strong>Single Journey Tickets:</strong> ${metroFlowDB.tickets.single.price}</div>
                    <div class="info-item">Available at: ${metroFlowDB.tickets.single.purchase.join(', ')}</div>
                    <br>
                    <div class="info-item"><strong>Day Pass:</strong> ${metroFlowDB.tickets.dayPass.price}</div>
                    <div class="info-item">Validity: ${metroFlowDB.tickets.dayPass.validity}</div>
                    <div class="info-item">Benefits: ${metroFlowDB.tickets.dayPass.benefits}</div>
                    <div class="info-item">Purchase at: ${metroFlowDB.tickets.dayPass.purchase.join(', ')}</div>
                    <br>
                    <div class="info-item"><strong>MRT Pass:</strong> ${metroFlowDB.tickets.mrtPass.price}</div>
                    <div class="info-item">Discount: ${metroFlowDB.tickets.mrtPass.discount}</div>
                    <div class="info-item">Validity: ${metroFlowDB.tickets.mrtPass.validity}</div>
                    <div class="info-item">Purchase at: ${metroFlowDB.tickets.mrtPass.purchase.join(', ')}</div>
                    <div class="info-item">Recharge at: ${metroFlowDB.tickets.mrtPass.recharge.join(', ')}</div>

                    <div class="action-buttons">
                        <button class="action-button" data-action="buy-ticket">
                            <i class="fas fa-shopping-cart"></i> Buy Ticket
                        </button>
                        <button class="action-button secondary" data-action="recharge-pass">
                            <i class="fas fa-credit-card"></i> Recharge Pass
                        </button>
                    </div>
                `;
                addFormattedMessage(response, 'bot');
                addSuggestedQuestions(["Single ticket price", "Day pass benefits", "MRT pass discount"]);

                // Add event listeners to action buttons
                setTimeout(() => {
                    document.querySelectorAll('.action-button').forEach(button => {
                        button.addEventListener('click', function() {
                            handleAction(this.getAttribute('data-action'));
                        });
                    });
                }, 100);
            }
            // Schedule information
            else if (message.includes('schedule') || message.includes('time') || message.includes('hour')) {
                response = `
                    <strong>MetroFlow Schedule:</strong><br>
                    <div class="info-item"><strong>Weekdays (Sat-Thu):</strong> ${metroFlowDB.schedule.weekdays.firstTrain} to ${metroFlowDB.schedule.weekdays.lastTrain}</div>
                    <div class="info-item">Frequency: ${metroFlowDB.schedule.weekdays.frequency}</div>
                    <br>
                    <div class="info-item"><strong>Fridays:</strong> ${metroFlowDB.schedule.friday.firstTrain} to ${metroFlowDB.schedule.friday.lastTrain}</div>
                    <div class="info-item">Frequency: ${metroFlowDB.schedule.friday.frequency}</div>
                    <br>
                    <div class="info-item"><strong>Uttara to Motijheel:</strong> First train ${metroFlowDB.schedule.routes.uttaraToMotijheel.firstTrain}, Last train ${metroFlowDB.schedule.routes.uttaraToMotijheel.lastTrain}</div>
                    <div class="info-item"><strong>Motijheel to Uttara:</strong> First train ${metroFlowDB.schedule.routes.motijheelToUttara.firstTrain}, Last train ${metroFlowDB.schedule.routes.motijheelToUttara.lastTrain}</div>

                    <div class="action-buttons">
                        <button class="action-button secondary" data-action="download-schedule">
                            <i class="fas fa-download"></i> Download Full Schedule
                        </button>
                    </div>
                `;
                addFormattedMessage(response, 'bot');
                addSuggestedQuestions(["First train time", "Last train time", "Friday schedule"]);

                // Add event listeners to action buttons
                setTimeout(() => {
                    document.querySelectorAll('.action-button').forEach(button => {
                        button.addEventListener('click', function() {
                            handleAction(this.getAttribute('data-action'));
                        });
                    });
                }, 100);
            }
            // Fare details
            else if (message.includes('fare') || message.includes('price') || message.includes('cost')) {
                response = `
                    <strong>Fare Information:</strong><br>
                    <div class="info-item"><strong>Single Journey:</strong> ${metroFlowDB.fares.single.range}</div>
                    <div class="info-item">Fare calculation: ${metroFlowDB.fares.single.calculation}</div>

                    <div class="interactive-element">
                        <strong>Calculate your fare:</strong>
                        <div class="form-group">
                            <label for="from-station">From Station:</label>
                            <select id="from-station">
                                <option value="">Select station</option>
                                ${metroFlowDB.stations.main.map(station => `<option value="${station}">${station}</option>`).join('')}
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="to-station">To Station:</label>
                            <select id="to-station">
                                <option value="">Select station</option>
                                ${metroFlowDB.stations.main.map(station => `<option value="${station}">${station}</option>`).join('')}
                            </select>
                        </div>
                        <button class="form-submit" id="calculate-fare">Calculate Fare</button>
                    </div>

                    <br>
                    <div class="info-item"><strong>Discounts Available:</strong></div>
                    <div class="info-item">Students: ${metroFlowDB.fares.discounts.students}</div>
                    <div class="info-item">Seniors: ${metroFlowDB.fares.discounts.seniors}</div>
                    <div class="info-item">Children: ${metroFlowDB.fares.discounts.children}</div>
                    <div class="info-item">Groups: ${metroFlowDB.fares.discounts.group}</div>
                `;
                addFormattedMessage(response, 'bot');

                // Add event listener for fare calculation
                setTimeout(() => {
                    document.getElementById('calculate-fare').addEventListener('click', function() {
                        const fromStation = document.getElementById('from-station').value;
                        const toStation = document.getElementById('to-station').value;

                        if (!fromStation || !toStation) {
                            addMessage("Please select both stations to calculate fare.", 'bot');
                            return;
                        }

                        if (fromStation === toStation) {
                            addMessage("You've selected the same station. Please choose different stations.", 'bot');
                            return;
                        }

                        // Simple fare calculation based on station distance
                        const fromIndex = metroFlowDB.stations.main.indexOf(fromStation);
                        const toIndex = metroFlowDB.stations.main.indexOf(toStation);
                        const stationCount = Math.abs(fromIndex - toIndex);

                        let fare = "$3.00"; // Maximum fare
                        if (stationCount <= 5) {
                            fare = metroFlowDB.fares.single.zones[stationCount].price;
                        }

                        addMessage(`The fare from ${fromStation} to ${toStation} is ${fare}.`, 'bot');
                    });
                }, 100);

                addSuggestedQuestions(["Student discount", "Group discount", "MRT pass discount"]);
            }
            // Station information
            else if (message.includes('station') || message.includes('location')) {
                response = `
                    <strong>Station Information:</strong><br>
                    <div class="info-item">Total stations: ${metroFlowDB.stations.count}</div>
                    <div class="info-item">Main stations: ${metroFlowDB.stations.main.join(', ')}</div>
                    <div class="info-item">Facilities: ${metroFlowDB.stations.facilities.join(', ')}</div>

                    <div class="action-buttons">
                        <button class="action-button" data-action="nearest-station">
                            <i class="fas fa-map-marker-alt"></i> Find Nearest Station
                        </button>
                    </div>
                `;
                addFormattedMessage(response, 'bot');
                addSuggestedQuestions(["Nearest station", "Station facilities", "Interchange stations"]);

                // Add event listeners to action buttons
                setTimeout(() => {
                    document.querySelectorAll('.action-button').forEach(button => {
                        button.addEventListener('click', function() {
                            handleAction(this.getAttribute('data-action'));
                        });
                    });
                }, 100);
            }
            // MRT pass details
            else if (message.includes('mrt') || message.includes('pass')) {
                response = `
                    <strong>MRT Pass Details:</strong><br>
                    <div class="info-item">Price: ${metroFlowDB.tickets.mrtPass.price}</div>
                    <div class="info-item">Discount: ${metroFlowDB.tickets.mrtPass.discount}</div>
                    <div class="info-item">Validity: ${metroFlowDB.tickets.mrtPass.validity}</div>
                    <div class="info-item">Purchase at: ${metroFlowDB.tickets.mrtPass.purchase.join(', ')}</div>
                    <div class="info-item">Recharge at: ${metroFlowDB.tickets.mrtPass.recharge.join(', ')}</div>

                    <div class="action-buttons">
                        <button class="action-button" data-action="buy-mrt-pass">
                            <i class="fas fa-credit-card"></i> Buy MRT Pass
                        </button>
                        <button class="action-button secondary" data-action="recharge-pass">
                            <i class="fas fa-sync-alt"></i> Recharge Pass
                        </button>
                    </div>
                `;
                addFormattedMessage(response, 'bot');
                addSuggestedQuestions(["How to recharge", "MRT pass benefits", "Pass validity"]);

                // Add event listeners to action buttons
                setTimeout(() => {
                    document.querySelectorAll('.action-button').forEach(button => {
                        button.addEventListener('click', function() {
                            handleAction(this.getAttribute('data-action'));
                        });
                    });
                }, 100);
            }
            // Service status
            else if (message.includes('status') || message.includes('delay') || message.includes('service')) {
                response = `
                    <strong>Current Service Status:</strong><br>
                    <div class="info-item">Last updated: ${metroFlowDB.serviceStatus.lastUpdated}</div>
                    <br>
                    <div class="status-indicator">
                        <div class="status-dot green"></div>
                        <div><strong>North-South Line:</strong> ${metroFlowDB.serviceStatus.lines.northSouth.message}</div>
                    </div>
                    <div class="status-indicator">
                        <div class="status-dot yellow"></div>
                        <div><strong>East-West Line:</strong> ${metroFlowDB.serviceStatus.lines.eastWest.message}</div>
                    </div>

                    <div class="action-buttons">
                        <button class="action-button secondary" data-action="report-issue">
                            <i class="fas fa-exclamation-circle"></i> Report Issue
                        </button>
                    </div>
                `;
                addFormattedMessage(response, 'bot');
                addSuggestedQuestions(["Is there a delay?", "When will service resume?", "Alternative routes"]);

                // Add event listeners to action buttons
                setTimeout(() => {
                    document.querySelectorAll('.action-button').forEach(button => {
                        button.addEventListener('click', function() {
                            handleAction(this.getAttribute('data-action'));
                        });
                    });
                }, 100);
            }
            // Lost and found
            else if (message.includes('lost') || message.includes('found') || message.includes('item')) {
                userSession.currentContext = 'lost_item';
                response = `
                    <strong>Lost Item Assistance:</strong><br>
                    <div class="info-item">If you've lost an item on the metro, I can help you report it.</div>
                    <div class="info-item">Lost and Found offices are located at: ${metroFlowDB.lostAndFound.locations.join(', ')}</div>
                    <div class="info-item">Contact: ${metroFlowDB.lostAndFound.contact}</div>
                    <div class="info-item">Hours: ${metroFlowDB.lostAndFound.hours}</div>

                    <div class="interactive-element">
                        <strong>Report a lost item:</strong>
                        <div class="form-group">
                            <label for="item-description">Item Description:</label>
                            <input type="text" id="item-description" placeholder="e.g., Black wallet, iPhone 12">
                        </div>
                        <div class="form-group">
                            <label for="lost-location">Where did you lose it?</label>
                            <select id="lost-location">
                                <option value="">Select station</option>
                                ${metroFlowDB.stations.main.map(station => `<option value="${station}">${station}</option>`).join('')}
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="lost-date">Approximate Date/Time:</label>
                            <input type="text" id="lost-date" placeholder="e.g., Today around 2 PM">
                        </div>
                        <button class="form-submit" id="report-lost-item">Report Lost Item</button>
                    </div>
                `;
                addFormattedMessage(response, 'bot');

                // Add event listener for lost item report
                setTimeout(() => {
                    document.getElementById('report-lost-item').addEventListener('click', function() {
                        const itemDescription = document.getElementById('item-description').value;
                        const lostLocation = document.getElementById('lost-location').value;
                        const lostDate = document.getElementById('lost-date').value;

                        if (!itemDescription || !lostLocation || !lostDate) {
                            addMessage("Please fill in all fields to report your lost item.", 'bot');
                            return;
                        }

                        addMessage("Thank you for reporting your lost item. I've submitted this information to our Lost and Found department. They will contact you if your item is found. Your reference number is #LF20231115-789.", 'bot');
                        userSession.currentContext = null;
                    });
                }, 100);
            }
            // Contact information
            else if (message.includes('contact') || message.includes('help') || message.includes('support')) {
                response = `
                    <strong>Contact Information:</strong><br>
                    <div class="info-item">General inquiries: ${metroFlowDB.contact.phone}</div>
                    <div class="info-item">Email: ${metroFlowDB.contact.email}</div>
                    <div class="info-item">Service hours: ${metroFlowDB.contact.hours}</div>
                    <div class="info-item">Emergency: ${metroFlowDB.contact.emergency}</div>

                    <div class="action-buttons">
                        <button class="action-button" data-action="call-support">
                            <i class="fas fa-phone"></i> Call Support
                        </button>
                        <button class="action-button secondary" data-action="email-support">
                            <i class="fas fa-envelope"></i> Email Support
                        </button>
                    </div>
                `;
                addFormattedMessage(response, 'bot');
                addSuggestedQuestions(["Customer service", "Complaint process", "Lost and found"]);

                // Add event listeners to action buttons
                setTimeout(() => {
                    document.querySelectorAll('.action-button').forEach(button => {
                        button.addEventListener('click', function() {
                            handleAction(this.getAttribute('data-action'));
                        });
                    });
                }, 100);
            }
            // Default response
            else {
                response = "I'm here to help with MetroFlow services. You can ask me about tickets, schedules, fares, stations, route planning, service status, or contact information. What would you like to know?";
                addMessage(response, 'bot');
                addSuggestedQuestions([
                    "Plan my route from Uttara to Motijheel",
                    "I lost my item on the metro",
                    "What are the ticket options?",
                    "Show current service status"
                ]);
            }

            // Add to conversation history
            userSession.conversationHistory.push({
                type: 'bot',
                content: response,
                timestamp: new Date()
            });
        }

        // Handle route planning
        function handleRoutePlanning(message) {
            // Simple route extraction (in a real application, use NLP)
            let fromStation = null;
            let toStation = null;

            // Check if message contains "from X to Y" pattern
            const fromToMatch = message.match(/from (.+?) to (.+)$/);
            if (fromToMatch) {
                fromStation = fromToMatch[1].trim();
                toStation = fromToMatch[2].trim();
            }

            // If we couldn't extract stations, ask for clarification
            if (!fromStation || !toStation) {
                userSession.currentContext = 'route_planning';
                addMessage("I can help you plan your route. Please tell me your starting station and destination, for example: 'From Uttara to Motijheel'", 'bot');
                return;
            }

            // Check if stations are valid
            if (!metroFlowDB.stations.main.includes(fromStation) || !metroFlowDB.stations.main.includes(toStation)) {
                addMessage(`I couldn't find one or both of those stations. Please make sure you're using the correct station names. Available stations: ${metroFlowDB.stations.main.join(', ')}`, 'bot');
                return;
            }

            // Calculate route information
            const fromIndex = metroFlowDB.stations.main.indexOf(fromStation);
            const toIndex = metroFlowDB.stations.main.indexOf(toStation);
            const stationCount = Math.abs(fromIndex - toIndex);

            let fare = "$3.00"; // Maximum fare
            if (stationCount <= 5) {
                fare = metroFlowDB.fares.single.zones[stationCount].price;
            }

            // Determine direction
            const direction = fromIndex < toIndex ?
                metroFlowDB.schedule.routes.uttaraToMotijheel :
                metroFlowDB.schedule.routes.motijheelToUttara;

            // Generate list of intermediate stations
            const startIdx = Math.min(fromIndex, toIndex);
            const endIdx = Math.max(fromIndex, toIndex);
            const intermediateStations = metroFlowDB.stations.main.slice(startIdx + 1, endIdx);

            response = `
                <strong>Route from ${fromStation} to ${toStation}:</strong><br>
                <div class="info-item">Estimated travel time: ${direction.duration}</div>
                <div class="info-item">Fare: ${fare}</div>
                <div class="info-item">First train: ${direction.firstTrain}</div>
                <div class="info-item">Last train: ${direction.lastTrain}</div>

                <div class="route-map">
                    [Map visualization: ${fromStation} → ${intermediateStations.join(' → ')} → ${toStation}]
                </div>

                <div class="action-buttons">
                    <button class="action-button" data-action="save-route">
                        <i class="fas fa-bookmark"></i> Save Route
                    </button>
                    <button class="action-button secondary" data-action="share-route">
                        <i class="fas fa-share-alt"></i> Share Route
                    </button>
                </div>
            `;

            addFormattedMessage(response, 'bot');

            // Add event listeners to action buttons
            setTimeout(() => {
                document.querySelectorAll('.action-button').forEach(button => {
                    button.addEventListener('click', function() {
                        handleAction(this.getAttribute('data-action'));
                    });
                });
            }, 100);

            addSuggestedQuestions(["Alternative routes", "Fare information", "Schedule details"]);

            // Add to conversation history
            userSession.conversationHistory.push({
                type: 'bot',
                content: response,
                timestamp: new Date()
            });
        }

        // Handle contextual responses
        function handleContextualResponse(message) {
            if (userSession.currentContext === 'route_planning') {
                handleRoutePlanning(message);
            } else {
                userSession.currentContext = null;
                respondToMessage(message);
            }
        }

        // Handle action buttons
        function handleAction(action) {
            switch(action) {
                case 'buy-ticket':
                    addMessage("Redirecting you to the ticket purchase page...", 'bot');
                    // In a real application, this would redirect or open a modal
                    setTimeout(() => {
                        addMessage("Ticket purchase interface would appear here. You can select stations, ticket type, and payment method.", 'bot');
                    }, 1000);
                    break;

                case 'recharge-pass':
                    addMessage("Opening MRT pass recharge interface...", 'bot');
                    // In a real application, this would redirect or open a modal
                    setTimeout(() => {
                        addMessage("Pass recharge interface would appear here. You can enter your pass number and payment details.", 'bot');
                    }, 1000);
                    break;

                case 'buy-mrt-pass':
                    addMessage("Taking you to MRT pass registration...", 'bot');
                    // In a real application, this would redirect or open a modal
                    setTimeout(() => {
                        addMessage("MRT pass registration form would appear here with personal details and payment options.", 'bot');
                    }, 1000);
                    break;

                case 'nearest-station':
                    if (userSession.userLocation) {
                        addMessage("Finding the nearest station to your location...", 'bot');
                        // In a real application, this would use geolocation and station coordinates
                        setTimeout(() => {
                            addMessage("Based on your location, the nearest station is Agargaon Station, approximately 1.2km away. Estimated walking time: 15 minutes.", 'bot');
                        }, 1000);
                    } else {
                        addMessage("To find the nearest station, I'll need your location. Click the location button or tell me your approximate location.", 'bot');
                    }
                    break;

                case 'call-support':
                    addMessage(`Initiating call to ${metroFlowDB.contact.phone}...`, 'bot');
                    break;

                case 'email-support':
                    addMessage(`Opening email to ${metroFlowDB.contact.email}...`, 'bot');
                    break;

                case 'save-route':
                    addMessage("Route saved to your favorites! You can access it anytime from your profile.", 'bot');
                    break;

                case 'share-route':
                    addMessage("Generating shareable link for your route...", 'bot');
                    setTimeout(() => {
                        addMessage("https://metroflow.com/route/Uttara/Motijheel?ref=chatbot (This is a demo link)", 'bot');
                    }, 1000);
                    break;

                case 'report-issue':
                    userSession.currentContext = 'report_issue';
                    addMessage("Please describe the issue you're experiencing:", 'bot');
                    break;

                case 'download-schedule':
                    addMessage("Downloading the complete schedule PDF...", 'bot');
                    setTimeout(() => {
                        addMessage("metroflow_complete_schedule_2023.pdf (2.4MB) would download to your device.", 'bot');
                    }, 1000);
                    break;
            }
        }

        // Add suggested questions
        function addSuggestedQuestions(questions) {
            // Remove existing suggested questions
            const existingSuggestions = document.querySelectorAll('.suggested-questions');
            existingSuggestions.forEach(el => el.remove());

            // Add new suggested questions
            const questionsContainer = document.createElement('div');
            questionsContainer.classList.add('suggested-questions');

            questions.forEach(q => {
                const button = document.createElement('button');
                button.classList.add('suggested-question');
                button.setAttribute('data-question', q);

                // Add appropriate icon based on question content
                let icon = 'fas fa-question';
                if (q.includes('route') || q.includes('from') || q.includes('to')) icon = 'fas fa-route';
                else if (q.includes('ticket')) icon = 'fas fa-ticket-alt';
                else if (q.includes('lost')) icon = 'fas fa-search';
                else if (q.includes('status')) icon = 'fas fa-info-circle';

                button.innerHTML = `<i class="${icon}"></i> ${q}`;

                button.addEventListener('click', function() {
                    inputField.value = this.getAttribute('data-question');
                    sendMessage();
                });
                questionsContainer.appendChild(button);
            });

            messagesContainer.appendChild(questionsContainer);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Simulate proactive notification
        setTimeout(() => {
            if (!chatbotWindow.classList.contains('active')) {
                document.querySelector('.notification-badge').style.display = 'flex';
                document.querySelector('.notification-badge').textContent = '!';
            }
        }, 30000);
    });
</script>