<!-- Geolocator Button (Fixed position, above emergency button) -->
<div id="geolocatorBtn" class="fixed bottom-52 right-4 z-40">
    <button onclick="handleGeolocatorClick()" class="bg-green-700 hover:bg-amber-900 text-white py-4 px-6 rounded-full shadow-2xl transition-all duration-300 transform hover:scale-110" aria-label="Journey Partner">
        <i class="fas fa-location-dot text-2xl"></i>
    </button>
</div>

<!-- Geolocator Modal -->
<div id="geolocatorModal" class="fixed inset-0 bg-black bg-opacity-70 z-[70] hidden flex items-center justify-center backdrop-blur-sm p-4 overflow-y-auto">
    <div class="bg-white rounded-3xl shadow-2xl w-full max-w-lg my-4 transform transition-all duration-300 scale-90 opacity-0" id="geolocatorModalContent">
        <!-- Header -->
        <div class="bg-gradient-to-r from-green-600 to-green-700 text-white px-6 py-6 rounded-t-3xl relative">
            <button id="closeGeolocatorModal" class="absolute top-4 right-4 text-white hover:text-gray-200 transition-colors">
                <i class="fas fa-times text-xl"></i>
            </button>

            <div class="text-center">
                <div class="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-3">
                    <i class="fas fa-location-dot text-3xl text-white"></i>
                </div>
                <h3 class="text-2xl font-bold text-white">Journey Partner</h3>
                <p class="text-green-100 text-lg mt-1">Track your metro journey to destination</p>
            </div>
        </div>

        <!-- Setup Mode -->
        <div id="setupMode" class="px-6 py-6">
            <!-- Destination Selection -->
            <div class="mb-5">
                <label class="block text-[1.2rem] font-medium text-gray-700 mb-3">Select Your Destination</label>
                <select id="destinationStation" class="w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-[1.1rem]">
                    <option value="">Choose destination station</option>
                    <option value="uttara-north">Uttara North</option>
                    <option value="uttara-center">Uttara Center</option>
                    <option value="pallabi">Pallabi</option>
                    <option value="mirpur-11">Mirpur 11</option>
                    <option value="mirpur-10">Mirpur 10</option>
                    <option value="kazipara">Kazipara</option>
                    <option value="shewrapara">Shewrapara</option>
                    <option value="agargaon">Agargaon</option>
                    <option value="bijoy-sarani">Bijoy Sarani</option>
                    <option value="farmgate">Farmgate</option>
                    <option value="karwan-bazar">Karwan Bazar</option>
                    <option value="shahbagh">Shahbagh</option>
                    <option value="dhaka-university">Dhaka University</option>
                    <option value="secretariat">Secretariat</option>
                    <option value="motijheel">Motijheel</option>
                </select>
            </div>

            <!-- Start Tracking Button -->
            <button onclick="startTracking()" class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200 flex items-center justify-center space-x-3 shadow-lg text-[1.1rem]">
                <i class="fas fa-play"></i>
                <span>Start Journey Tracking</span>
            </button>
        </div>

        <!-- Tracking Mode -->
        <div id="trackingMode" class="px-6 py-6 hidden">
            <!-- Current Status -->
            <div class="text-center mb-6">
                <div class="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-route text-green-600 text-3xl"></i>
                </div>
                <h4 class="text-2xl font-bold text-gray-800">Tracking Journey</h4>
                <p class="text-green-600 text-xl">Destination: <span id="currentDestination" class="font-semibold"></span></p>
            </div>

            <!-- Status Information -->
            <div class="bg-green-50 rounded-xl p-4 mb-5 text-lg">
                <div class="flex items-center justify-between mb-3 ">
                    <span class="text-gray-700 font-medium">Status:</span>
                    <span id="trackingStatus" class="text-green-600 font-semibold">Tracking...</span>
                </div>
                <div class="flex items-center justify-between mb-3">
                    <span class="text-gray-700 font-medium">Distance to Destination:</span>
                    <span id="distanceToDestination" class="text-gray-600">Calculating...</span>
                </div>
                <div class="flex items-center justify-between">
                    <span class="text-gray-700 font-medium">Last Updated:</span>
                    <span id="lastUpdated" class="text-gray-600">Now</span>
                </div>
            </div>

            <!-- Stop Tracking Button -->
            <button onclick="stopTracking()" class="w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200 flex items-center justify-center space-x-3 shadow-lg">
                <i class="fas fa-stop"></i>
                <span>Stop Tracking</span>
            </button>
        </div>
    </div>
</div>

<!-- Destination Reached Modal -->
<div id="destinationReachedModal" class="fixed inset-0 bg-black bg-opacity-70 z-[80] hidden flex items-center justify-center backdrop-blur-sm">
    <div class="bg-white rounded-3xl shadow-2xl w-full max-w-md mx-4 transform transition-all duration-300 scale-90 opacity-0" id="destinationReachedContent">
        <!-- Header -->
        <div class="bg-gradient-to-r from-green-600 to-green-700 text-white px-8 py-8 rounded-t-3xl">
            <div class="text-center">
                <div class="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-check-circle text-4xl text-white"></i>
                </div>
                <h3 class="text-2xl font-bold text-white mb-2">Destination Reached!</h3>
                <p class="text-green-100">You have successfully arrived at your destination</p>
            </div>
        </div>

        <!-- Body -->
        <div class="px-8 py-8 text-center">
            <p class="text-lg text-gray-700 mb-6">Thank you for using MetroFlow Journey Partner!</p>
            <button onclick="closeDestinationReachedModal()" class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200">
                Complete Journey
            </button>
        </div>
    </div>
</div>

<!-- Geolocator Login Prompt Modal -->
<div id="geolocatorLoginPromptModal" class="fixed inset-0 bg-black bg-opacity-60 z-[75] hidden flex items-center justify-center backdrop-blur-sm">
    <div class="bg-white rounded-3xl shadow-2xl w-full max-w-md mx-4 transform transition-all duration-300 scale-90 opacity-0" id="geolocatorLoginPromptContent">
        <!-- Header -->
        <div class="bg-gradient-to-r from-green-600 to-green-700 text-white px-8 py-6 rounded-t-3xl relative">
            <button id="closeGeolocatorLoginPrompt" class="absolute top-4 right-4 text-white hover:text-gray-200 transition-colors">
                <i class="fas fa-times text-xl"></i>
            </button>

            <div class="text-center">
                <div class="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-lock text-3xl text-white"></i>
                </div>
                <h3 class="text-2xl font-bold text-white">Login Required</h3>
            </div>
        </div>

        <!-- Body -->
        <div class="px-8 py-8 text-center">
            <p class="text-lg text-gray-700 mb-8">Please login to use Journey Partner and track your metro journey with personalized features.</p>

            <div class="space-y-4">
                <a href="/User/Login?returnUrl=@Uri.EscapeDataString(Context.Request.Path + Context.Request.QueryString)" class="w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200 flex items-center justify-center space-x-2 shadow-lg">
                    <i class="fas fa-sign-in-alt"></i>
                    <span>Login Now</span>
                </a>

                <p class="text-gray-500 text-sm">Don't have an account?</p>

                <a href="/User/Signup" class="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 px-6 rounded-xl transition-colors duration-200 flex items-center justify-center space-x-2">
                    <i class="fas fa-user-plus"></i>
                    <span>Create Account</span>
                </a>
            </div>
        </div>
    </div>
</div>

<script>
    let isTracking = false;
    let watchId = null;
    let destinationCoords = null;
    let selectedDestination = '';

    // Metro station coordinates (approximate)
    const stationCoordinates = {
        'uttara-north': { lat: 23.8759, lng: 90.3795 },
        'uttara-center': { lat: 23.8700, lng: 90.3797 },
        'pallabi': { lat: 23.8291, lng: 90.3664 },
        'mirpur-11': { lat: 23.8178, lng: 90.3684 },
        'mirpur-10': { lat: 23.8068, lng: 90.3683 },
        'kazipara': { lat: 23.7978, lng: 90.3717 },
        'shewrapara': { lat: 23.7908, lng: 90.3889 },
        'agargaon': { lat: 23.7751, lng: 90.3893 },
        'bijoy-sarani': { lat: 23.7630, lng: 90.3892 },
        'farmgate': { lat: 23.7562, lng: 90.3897 },
        'karwan-bazar': { lat: 23.7505, lng: 90.3933 },
        'shahbagh': { lat: 23.7387, lng: 90.3950 },
        'dhaka-university': { lat: 23.7307, lng: 90.3954 },
        'secretariat': { lat: 23.7234, lng: 90.3957 },
        'motijheel': { lat: 23.7167, lng: 90.4176 }
    };

    // Check if user is logged in (server-side value)
    function isUserLoggedIn() {
        return @(User.Identity?.IsAuthenticated == true ? "true" : "false");
    }

    // Handle geolocator button click with authentication check
    function handleGeolocatorClick() {
        if (isUserLoggedIn()) {
            // User is logged in, show the geolocator modal
            openGeolocatorModal();
        } else {
            // User is not logged in, show login prompt
            showGeolocatorLoginPrompt();
        }
    }

    // Show geolocator login prompt
    function showGeolocatorLoginPrompt() {
        const modal = document.getElementById('geolocatorLoginPromptModal');
        const content = document.getElementById('geolocatorLoginPromptContent');

        modal.classList.remove('hidden');

        setTimeout(() => {
            content.classList.remove('scale-90', 'opacity-0');
            content.classList.add('scale-100', 'opacity-100');
        }, 10);

        document.body.style.overflow = 'hidden';
    }

    // Hide geolocator login prompt
    function hideGeolocatorLoginPrompt() {
        const modal = document.getElementById('geolocatorLoginPromptModal');
        const content = document.getElementById('geolocatorLoginPromptContent');

        content.classList.remove('scale-100', 'opacity-100');
        content.classList.add('scale-90', 'opacity-0');

        setTimeout(() => {
            modal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }, 300);
    }

    // Initialize tracking on page load
    document.addEventListener('DOMContentLoaded', function() {
        if (isUserLoggedIn()) {
            initializeTracking();
        }
        setupGeolocatorEventListeners();
    });

    // Initialize tracking from localStorage (only for logged-in users)
    function initializeTracking() {
        const trackingData = localStorage.getItem('metroflow_tracking');

        if (trackingData) {
            try {
                const data = JSON.parse(trackingData);

                if (data.isTracking && data.destination) {
                    selectedDestination = data.destination;
                    destinationCoords = stationCoordinates[selectedDestination];
                    isTracking = true;

                    // Resume tracking
                    startLocationWatching();
                    updateTrackingButton();

                    console.log('Resumed tracking to:', getStationDisplayName(selectedDestination));
                }
            } catch (error) {
                console.error('Error loading tracking data:', error);
                clearTrackingData();
            }
        }
    }

    // Save tracking data to localStorage
    function saveTrackingData() {
        const data = {
            isTracking: isTracking,
            destination: selectedDestination,
            timestamp: new Date().getTime()
        };

        localStorage.setItem('metroflow_tracking', JSON.stringify(data));
    }

    // Clear tracking data from localStorage
    function clearTrackingData() {
        localStorage.removeItem('metroflow_tracking');
    }

    // Open geolocator modal (only called when user is authenticated)
    function openGeolocatorModal() {
        const modal = document.getElementById('geolocatorModal');
        const content = document.getElementById('geolocatorModalContent');

        modal.classList.remove('hidden');

        setTimeout(() => {
            content.classList.remove('scale-90', 'opacity-0');
            content.classList.add('scale-100', 'opacity-100');
        }, 10);

        document.body.style.overflow = 'hidden';

        // Show appropriate mode
        if (isTracking) {
            showTrackingMode();
        } else {
            showSetupMode();
        }
    }

    // Close geolocator modal
    function closeGeolocatorModal() {
        const modal = document.getElementById('geolocatorModal');
        const content = document.getElementById('geolocatorModalContent');

        content.classList.remove('scale-100', 'opacity-100');
        content.classList.add('scale-90', 'opacity-0');

        setTimeout(() => {
            modal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }, 300);
    }

    // Show setup mode
    function showSetupMode() {
        document.getElementById('setupMode').classList.remove('hidden');
        document.getElementById('trackingMode').classList.add('hidden');
    }

    // Show tracking mode
    function showTrackingMode() {
        document.getElementById('setupMode').classList.add('hidden');
        document.getElementById('trackingMode').classList.remove('hidden');
        document.getElementById('currentDestination').textContent = getStationDisplayName(selectedDestination);
    }

    // Start tracking
    function startTracking() {
        const destination = document.getElementById('destinationStation').value;

        if (!destination) {
            alert('Please select a destination station first.');
            return;
        }

        // Check if geolocation is supported
        if (!navigator.geolocation) {
            alert('Geolocation is not supported by this browser.');
            return;
        }

        selectedDestination = destination;
        destinationCoords = stationCoordinates[destination];
        isTracking = true;

        // Save tracking data
        saveTrackingData();

        // Start watching position
        startLocationWatching();

        showTrackingMode();
        updateTrackingButton();
    }

    // Start location watching
    function startLocationWatching() {
        if (!navigator.geolocation) return;

        watchId = navigator.geolocation.watchPosition(
            updateLocation,
            handleLocationError,
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 5000
            }
        );
    }

    // Stop tracking
    function stopTracking() {
        if (watchId !== null) {
            navigator.geolocation.clearWatch(watchId);
            watchId = null;
        }

        isTracking = false;
        selectedDestination = '';
        destinationCoords = null;

        // Clear saved data
        clearTrackingData();

        showSetupMode();
        updateTrackingButton();
        closeGeolocatorModal();

        console.log('Tracking stopped by user');
    }

    // Update location
    function updateLocation(position) {
        const userLat = position.coords.latitude;
        const userLng = position.coords.longitude;

        if (destinationCoords) {
            const distance = calculateDistance(userLat, userLng, destinationCoords.lat, destinationCoords.lng);

            // Update UI if modal is open
            const distanceElement = document.getElementById('distanceToDestination');
            const lastUpdatedElement = document.getElementById('lastUpdated');

            if (distanceElement) {
                distanceElement.textContent = distance < 1 ?
                    Math.round(distance * 1000) + ' meters' :
                    distance.toFixed(1) + ' km';
            }

            if (lastUpdatedElement) {
                lastUpdatedElement.textContent = new Date().toLocaleTimeString();
            }

            // Check if destination is reached (within 200 meters)
            if (distance < 0.2) {
                destinationReached();
            }

            console.log(`Distance to ${getStationDisplayName(selectedDestination)}: ${distance.toFixed(2)} km`);
        }
    }

    // Handle location error
    function handleLocationError(error) {
        let message = 'Unable to retrieve your location.';

        switch(error.code) {
            case error.PERMISSION_DENIED:
                message = 'Location access denied. Please enable location permissions.';
                break;
            case error.POSITION_UNAVAILABLE:
                message = 'Location information unavailable.';
                break;
            case error.TIMEOUT:
                message = 'Location request timed out.';
                break;
        }

        const statusElement = document.getElementById('trackingStatus');
        if (statusElement) {
            statusElement.textContent = 'Error: ' + message;
        }

        console.error('Location error:', message);
    }

    // Calculate distance between two coordinates (Haversine formula)
    function calculateDistance(lat1, lng1, lat2, lng2) {
        const R = 6371; // Earth's radius in kilometers
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLng = (lng2 - lng1) * Math.PI / 180;
        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                  Math.sin(dLng/2) * Math.sin(dLng/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        return R * c;
    }

    // Get station display name
    function getStationDisplayName(stationId) {
        const names = {
            'uttara-north': 'Uttara North',
            'uttara-center': 'Uttara Center',
            'pallabi': 'Pallabi',
            'mirpur-11': 'Mirpur 11',
            'mirpur-10': 'Mirpur 10',
            'kazipara': 'Kazipara',
            'shewrapara': 'Shewrapara',
            'agargaon': 'Agargaon',
            'bijoy-sarani': 'Bijoy Sarani',
            'farmgate': 'Farmgate',
            'karwan-bazar': 'Karwan Bazar',
            'shahbagh': 'Shahbagh',
            'dhaka-university': 'Dhaka University',
            'secretariat': 'Secretariat',
            'motijheel': 'Motijheel'
        };
        return names[stationId] || stationId;
    }

    // Destination reached
    function destinationReached() {
        // Stop tracking
        if (watchId !== null) {
            navigator.geolocation.clearWatch(watchId);
            watchId = null;
        }

        isTracking = false;

        // Clear saved data
        clearTrackingData();

        // Close geolocator modal
        closeGeolocatorModal();

        // Show destination reached modal
        setTimeout(() => {
            showDestinationReachedModal();
        }, 500);

        updateTrackingButton();

        console.log('Destination reached:', getStationDisplayName(selectedDestination));
    }

    // Show destination reached modal
    function showDestinationReachedModal() {
        const modal = document.getElementById('destinationReachedModal');
        const content = document.getElementById('destinationReachedContent');

        modal.classList.remove('hidden');

        setTimeout(() => {
            content.classList.remove('scale-90', 'opacity-0');
            content.classList.add('scale-100', 'opacity-100');
        }, 10);

        document.body.style.overflow = 'hidden';
    }

    // Close destination reached modal
    function closeDestinationReachedModal() {
        const modal = document.getElementById('destinationReachedModal');
        const content = document.getElementById('destinationReachedContent');

        content.classList.remove('scale-100', 'opacity-100');
        content.classList.add('scale-90', 'opacity-0');

        setTimeout(() => {
            modal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }, 300);
    }

    // Update tracking button appearance
    function updateTrackingButton() {
        const btn = document.querySelector('#geolocatorBtn button');
        if (btn) {
            if (isTracking) {
                btn.classList.remove('bg-green-600', 'hover:bg-green-700');
                btn.classList.add('bg-green-500', 'hover:bg-green-600');
                btn.innerHTML = '<i class="fas fa-location-dot text-2xl animate-pulse"></i>';
            } else {
                btn.classList.remove('bg-green-500', 'hover:bg-green-600');
                btn.classList.add('bg-green-600', 'hover:bg-green-700');
                btn.innerHTML = '<i class="fas fa-location-dot text-2xl"></i>';
            }
        }
    }

    // Setup event listeners
    function setupGeolocatorEventListeners() {
        const closeBtn = document.getElementById('closeGeolocatorModal');
        const modal = document.getElementById('geolocatorModal');
        const closeLoginPromptBtn = document.getElementById('closeGeolocatorLoginPrompt');
        const loginPromptModal = document.getElementById('geolocatorLoginPromptModal');

        if (closeBtn) {
            closeBtn.addEventListener('click', closeGeolocatorModal);
        }

        if (modal) {
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeGeolocatorModal();
                }
            });
        }

        if (closeLoginPromptBtn) {
            closeLoginPromptBtn.addEventListener('click', hideGeolocatorLoginPrompt);
        }

        if (loginPromptModal) {
            loginPromptModal.addEventListener('click', function(e) {
                if (e.target === this) {
                    hideGeolocatorLoginPrompt();
                }
            });
        }
    }

    // Handle page visibility changes (when user switches tabs or minimizes browser)
    document.addEventListener('visibilitychange', function() {
        if (isTracking && isUserLoggedIn()) {
            if (document.hidden) {
                console.log('Page hidden - tracking continues in background');
            } else {
                console.log('Page visible - tracking active');
                // Refresh tracking if needed
                if (watchId === null && isTracking) {
                    startLocationWatching();
                }
            }
        }
    });

    // Handle page unload (save state before leaving)
    window.addEventListener('beforeunload', function() {
        if (isTracking && isUserLoggedIn()) {
            saveTrackingData();
            console.log('Page unloading - tracking data saved');
        }
    });

    // Make functions available globally for escape key handling
    window.closeGeolocatorModal = closeGeolocatorModal;
    window.hideGeolocatorLoginPrompt = hideGeolocatorLoginPrompt;
    window.closeDestinationReachedModal = closeDestinationReachedModal;
</script>
